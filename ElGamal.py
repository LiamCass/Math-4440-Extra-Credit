import random

print((3**6)%17)
# ALICE
G = NotImplementedError("Groups not currently programatically implemented.\n \
                        (Errors when it comes to showing closure of groups with infinite underlying sets)")
q = len(G)
g = G.generator()
print("Alice picks a finite cyclic group G, with order q and generated by g")

x, secret_key_alice = random.randint(1,q-1)
print("Alice chooses random integer 0<x<q. This is her private key.")

h = g ** x
print("Alice computes her public key value, h, such that h = g^x")

public_key = (G,q,g,h)
print(f"Alice shares her full public key, (G,q,g,h): {public_key}")

# BOB
M = "this is Bob's unencrypted message"
print("Bob creates a message, M, he wants to send to Alice.")
print("Bob maps the message M to an element mâˆŠG using a reversible function")
print("Bob chooses random integer 0<y<q. This is his private key.")
print("Bob computes his public key value, c1, such that c1 = g^y")
print("Bob computes the shared secret, s, such that s = h^y")
print("Bob sends Alice his cyphertext (c1,c2): {cyphertext}")

# ALICE
